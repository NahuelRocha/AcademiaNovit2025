events {
    worker_connections 1024;
}

http {
    # Resolver DNS para servicios dinámicos
    resolver 127.0.0.11 valid=10s;
    
    # Buffer y timeout configurations
    client_max_body_size 20M;
    client_body_buffer_size 128k;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Upstream con resolución dinámica
    upstream api_backend {
        least_conn;
        # Usar variable para resolución DNS dinámica
        server api:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    server {
        listen 80;
        listen 8080;
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;

        # Health check endpoint local
        location /nginx-health {
            access_log off;
            return 200 "nginx ok\n";
            add_header Content-Type text/plain;
        }

        # Proxy hacia la API
        location / {
            # Usar variable para permitir resolución DNS dinámica
            set $upstream http://api_backend;
            proxy_pass $upstream;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Retry configuration
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 60s;

            # Cache de errores para evitar cascading failures
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Health check que puede fallar sin afectar nginx
        location /health {
            access_log off;
            # Intentar proxy primero, fallback a respuesta local
            proxy_pass http://api_backend/health;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
            
            # Headers para health check
            proxy_set_header Host $host;
            proxy_set_header Connection "close";
            
            # Si falla el upstream, devolver un 503
            error_page 502 503 504 = @health_fallback;
        }

        location @health_fallback {
            access_log off;
            return 503 "api not ready\n";
            add_header Content-Type text/plain;
        }
    }
}