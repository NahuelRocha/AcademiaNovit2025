name: Docker Deploy DEV

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_TAG: production

jobs:
  deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Debug: Verificar archivos locales
      - name: Debug - List local files
        run: |
          echo "📁 Archivos en el directorio actual:"
          ls -la
          echo "🔍 Verificando archivos específicos:"
          ls -la nginx.conf docker-swarm.yml || echo "❌ Algunos archivos no encontrados localmente"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Crear directorio remoto primero
      - name: Create remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            echo "📁 Creando directorio..."
            mkdir -p ~/academianovit-prod
            echo "✅ Directorio creado/verificado"

      - name: Copy files to server
        run: |
          # Crear archivo de clave privada temporal
          echo "${{ secrets.VM_PRIVATE_KEY }}" > /tmp/private_key
          chmod 600 /tmp/private_key

          # Copiar archivos usando SCP directamente
          scp -i /tmp/private_key -P ${{ secrets.VM_PORT }} -o StrictHostKeyChecking=no \
              nginx.conf docker-swarm.yml \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/academianovit-prod/

          # Limpiar clave temporal
          rm /tmp/private_key

      # Debug: Verificar archivos copiados
      - name: Debug - Verify copied files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            echo "🔍 Debug - Verificando archivos copiados:"
            echo "Directorio home:"
            ls -la ~
            echo ""
            echo "Directorio academianovit-prod:"
            ls -la ~/academianovit-prod/
            echo ""
            echo "Contenido de nginx.conf (primeras 5 líneas):"
            head -n 5 ~/academianovit-prod/nginx.conf || echo "❌ nginx.conf no encontrado"
            echo ""
            echo "Contenido de docker-swarm.yml (primeras 5 líneas):"
            head -n 5 ~/academianovit-prod/docker-swarm.yml || echo "❌ docker-swarm.yml no encontrado"

      - name: Deploy to production via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            set -e

            cd ~/academianovit-prod

            echo "🌀 Iniciando despliegue Swarm en producción..."

            # Verificar que los archivos existen
            if [ ! -f nginx.conf ] || [ ! -f docker-swarm.yml ]; then
              echo "❌ Error: archivos requeridos no encontrados"
              exit 1
            fi

            # Inicializar Docker Swarm si no está inicializado
            if ! docker node ls >/dev/null 2>&1; then
              docker swarm init --advertise-addr $(hostname -I | awk '{print $1}')
            fi

            # Exportar variables de entorno
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export GITHUB_REPOSITORY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

            # Pull de la imagen
            docker pull ghcr.io/${GITHUB_REPOSITORY}:${{ env.DEPLOY_TAG }}

            # Desplegar stack
            docker stack deploy -c docker-swarm.yml academianovit

            # Monitorear despliegue
            for i in {1..12}; do
                echo "📊 Estado del stack (intento $i/12):"
                docker stack services academianovit
                
                API_READY=$(docker service ls --filter "name=academianovit_api" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                NGINX_READY=$(docker service ls --filter "name=academianovit_nginx" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                POSTGRES_READY=$(docker service ls --filter "name=academianovit_postgres" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                
                echo "Estado: API=$API_READY/5, Nginx=$NGINX_READY/1, Postgres=$POSTGRES_READY/1"
                
                if [ "$API_READY" -gt 0 ] && [ "$NGINX_READY" -eq 1 ] && [ "$POSTGRES_READY" -eq 1 ]; then
                    echo "✅ Servicios corriendo correctamente"
                    break
                fi
                
                sleep 15
            done

            echo "✅ Despliegue completado."

      - name: Send notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.DEBUGMAIL_HOST }}
          server_port: ${{ secrets.DEBUGMAIL_PORT }}
          username: ${{ secrets.DEBUGMAIL_USER }}
          password: ${{ secrets.DEBUGMAIL_PASS }}
          subject: "🚀 Deploy a Producción ${{ job.status }}"
          body: |
            Se ha realizado el deploy a producción.

            Imagen: ghcr.io/${{ github.repository }}:${{ env.DEPLOY_TAG }}
            Resultado: ${{ job.status }}
            Ver logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.DEBUGMAIL_USER }}
