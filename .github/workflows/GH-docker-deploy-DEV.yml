name: Docker Deploy DEV

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_TAG: production

jobs:
  deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Debug: Verificar archivos locales
      - name: Debug - List local files
        run: |
          echo "üìÅ Archivos en el directorio actual:"
          ls -la
          echo "üîç Verificando archivos espec√≠ficos:"
          ls -la nginx.conf docker-swarm.yml || echo "‚ùå Algunos archivos no encontrados localmente"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Crear directorio remoto primero
      - name: Create remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            echo "üìÅ Creando directorio..."
            mkdir -p ~/academianovit-prod
            echo "‚úÖ Directorio creado/verificado"

      - name: Copy files to server
        run: |
          # Crear archivo de clave privada temporal
          echo "${{ secrets.VM_PRIVATE_KEY }}" > /tmp/private_key
          chmod 600 /tmp/private_key

          # Copiar archivos usando SCP directamente
          scp -i /tmp/private_key -P ${{ secrets.VM_PORT }} -o StrictHostKeyChecking=no \
              nginx.conf docker-swarm.yml \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/academianovit-prod/

          # Limpiar clave temporal
          rm /tmp/private_key

      # Debug: Verificar archivos copiados
      - name: Debug - Verify copied files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            echo "üîç Debug - Verificando archivos copiados:"
            echo "Directorio home:"
            ls -la ~
            echo ""
            echo "Directorio academianovit-prod:"
            ls -la ~/academianovit-prod/
            echo ""
            echo "Contenido de nginx.conf (primeras 5 l√≠neas):"
            head -n 5 ~/academianovit-prod/nginx.conf || echo "‚ùå nginx.conf no encontrado"
            echo ""
            echo "Contenido de docker-swarm.yml (primeras 5 l√≠neas):"
            head -n 5 ~/academianovit-prod/docker-swarm.yml || echo "‚ùå docker-swarm.yml no encontrado"

      - name: Deploy to production via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            set -e

            cd ~/academianovit-prod

            echo "üåÄ Iniciando despliegue Swarm en producci√≥n..."

            # Verificar que los archivos existen
            echo "üìÅ Verificando archivos..."
            ls -la

            if [ ! -f nginx.conf ]; then
              echo "‚ùå Error: nginx.conf no encontrado"
              exit 1
            fi

            if [ ! -f docker-swarm.yml ]; then
              echo "‚ùå Error: docker-swarm.yml no encontrado"
              exit 1
            fi

            echo "‚úÖ Archivos encontrados correctamente"

            # Inicializar Docker Swarm si no est√° inicializado
            echo "üîÑ Verificando Docker Swarm..."
            if ! docker node ls >/dev/null 2>&1; then
              echo "üì° Inicializando Docker Swarm..."
              docker swarm init --advertise-addr $(hostname -I | awk '{print $1}')
              echo "‚úÖ Docker Swarm inicializado"
            else
              echo "‚úÖ Docker Swarm ya est√° activo"
            fi

            # Exportar secretos como variables de entorno
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export GITHUB_REPOSITORY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

            # Crear o reemplazar config para nginx
            echo "üîß Configurando nginx..."
            docker config rm nginx_config 2>/dev/null || true
            docker config create nginx_config nginx.conf
            echo "‚úÖ Nginx config creado"

            # Pull de la imagen antes del despliegue (preheat)
            echo "üì• Descargando imagen..."
            echo "Repository original: ${{ github.repository }}"
            echo "Repository lowercase: ${GITHUB_REPOSITORY}"
            docker pull ghcr.io/${GITHUB_REPOSITORY}:${{ env.DEPLOY_TAG }}
            echo "‚úÖ Imagen descargada"

            # Verificar si el stack existe
            STACK_EXISTS=$(docker stack ls --format "table {{.Name}}" | grep -c "^academianovit$" || true)

            if [ "$STACK_EXISTS" -gt 0 ]; then
                echo "üîÑ Stack existente encontrado, realizando actualizaci√≥n gradual..."
                
                # Primero actualizar solo postgres si es necesario
                echo "üìä Verificando estado de postgres..."
                POSTGRES_RUNNING=$(docker service ps academianovit_postgres --filter "desired-state=running" --format "table {{.CurrentState}}" | grep -c "Running" || true)
                
                if [ "$POSTGRES_RUNNING" -eq 0 ]; then
                    echo "üóÑÔ∏è Iniciando postgres primero..."
                    docker stack deploy -c docker-swarm.yml academianovit
                    
                    echo "‚è≥ Esperando a que postgres est√© listo..."
                    timeout 120 bash -c '
                    while true; do
                        if docker service logs academianovit_postgres 2>/dev/null | grep -q "database system is ready to accept connections"; then
                            echo "‚úÖ Postgres est√° listo"
                            break
                        fi
                        echo "‚è≥ Esperando postgres..."
                        sleep 5
                    done'
                fi
                
                # Actualizar servicios de API gradualmente
                echo "üöÄ Desplegando/actualizando servicios de API..."
                docker stack deploy -c docker-swarm.yml academianovit
                
                echo "‚è≥ Esperando a que al menos una r√©plica de API est√© lista..."
                timeout 180 bash -c '
                while true; do
                    API_RUNNING=$(docker service ls --filter "name=academianovit_api" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                    if [ "$API_RUNNING" -gt 0 ]; then
                        echo "‚úÖ Al menos una r√©plica de API est√° corriendo ($API_RUNNING)"
                        break
                    fi
                    echo "‚è≥ Esperando r√©plicas de API... ($API_RUNNING/5)"
                    sleep 10
                done'
                
                # Finalmente desplegar nginx
                echo "üåê Desplegando nginx..."
                docker stack deploy -c docker-swarm.yml academianovit
                
            else
                echo "üÜï Nuevo stack, desplegando desde cero..."
                
                # Deploy inicial - postgres primero
                echo "üóÑÔ∏è Desplegando postgres..."
                docker stack deploy -c docker-swarm.yml academianovit
                
                echo "‚è≥ Esperando a que postgres est√© completamente listo..."
                timeout 120 bash -c '
                while true; do
                    if docker service logs academianovit_postgres 2>/dev/null | grep -q "database system is ready to accept connections"; then
                        echo "‚úÖ Postgres est√° listo"
                        break
                    fi
                    echo "‚è≥ Esperando postgres..."
                    sleep 5
                done'
                
                # Peque√±a pausa adicional para asegurar que postgres est√© 100% listo
                echo "‚è≥ Pausa adicional para estabilizaci√≥n de postgres..."
                sleep 10
                
                # Deploy completo
                echo "üöÄ Desplegando stack completo..."
                docker stack deploy -c docker-swarm.yml academianovit
            fi

            # Monitoreo del despliegue
            echo "üìä Monitoreando despliegue..."
            for i in {1..18}; do  # 3 minutos m√°ximo
                echo "üìä Estado del stack (intento $i/18):"
                docker stack services academianovit
                
                # Verificar si todo est√° corriendo
                API_READY=$(docker service ls --filter "name=academianovit_api" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                NGINX_READY=$(docker service ls --filter "name=academianovit_nginx" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                POSTGRES_READY=$(docker service ls --filter "name=academianovit_postgres" --format "table {{.Replicas}}" | tail -n +2 | grep -o "^[0-9]*" || echo "0")
                
                echo "Estado: API=$API_READY/5, Nginx=$NGINX_READY/1, Postgres=$POSTGRES_READY/1"
                
                if [ "$API_READY" -gt 0 ] && [ "$NGINX_READY" -eq 1 ] && [ "$POSTGRES_READY" -eq 1 ]; then
                    echo "‚úÖ Servicios b√°sicos est√°n corriendo!"
                    break
                fi
                
                if [ $i -eq 18 ]; then
                    echo "‚ö†Ô∏è Tiempo m√°ximo alcanzado. Verificando logs de errores..."
                    echo "üîç Logs de API:"
                    docker service logs --tail 10 academianovit_api
                    echo "üîç Logs de Nginx:"
                    docker service logs --tail 5 academianovit_nginx
                fi
                
                sleep 10
            done

            echo "üìä Estado final del stack:"
            docker stack services academianovit

            # Verificaci√≥n de salud b√°sica
            echo "üîç Verificaci√≥n de salud b√°sica..."
            sleep 5
            if curl -f http://localhost/nginx-health >/dev/null 2>&1; then
                echo "‚úÖ Nginx responde correctamente"
            else
                echo "‚ö†Ô∏è Nginx no responde en el health check local"
            fi

            echo "‚úÖ Despliegue completado."

      - name: Send notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.DEBUGMAIL_HOST }}
          server_port: ${{ secrets.DEBUGMAIL_PORT }}
          username: ${{ secrets.DEBUGMAIL_USER }}
          password: ${{ secrets.DEBUGMAIL_PASS }}
          subject: "üöÄ Deploy a Producci√≥n ${{ job.status }}"
          body: |
            Se ha realizado el deploy a producci√≥n.

            Imagen: ghcr.io/${{ github.repository }}:${{ env.DEPLOY_TAG }}
            Resultado: ${{ job.status }}
            Ver logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.DEBUGMAIL_USER }}
